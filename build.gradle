
plugins {
    id 'idea'
    id 'application'
    id "com.github.langmo.gradlensis" version "0.1.0"
    id "org.moditect.gradleplugin" version "1.0.0-rc3"
    id "nebula.ospackage" version "8.4.1"
}

version '1.0-rc4'

if (!System.getProperty("java.runtime.name").contains("OpenJDK")) {
    println "OpenJDK is required!"
    return
}

java {
    modularity.inferModulePath = true
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

application {
    mainModule = 'com.crschnick.pdx_unlimiter.updater'
    mainClass = 'com.crschnick.pdx_unlimiter.updater.Updater'
    applicationDefaultJvmArgs = ['-Dpdxu.installDir=' + System.getProperty("pdxu.installDir")]
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "2.11.3"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.0-alpha1'
    implementation files("$buildDir/generated-modules/commons-io-2.8.0.jar")
    implementation files("$buildDir/generated-modules/commons-lang3-3.11.jar")
    implementation files("$buildDir/generated-modules/sentry-1.7.30.jar")
}

addDependenciesModuleInfo {
    overwriteExistingFiles = true
    jdepsExtraArgs = ['-q']
    outputDirectory = file("$buildDir/generated-modules")
    modules {
        module {
            artifact 'org.apache.commons:commons-lang3:3.11'
            moduleInfoSource = '''
                module org.apache.commons.lang3 {
                    requires java.se;
                    exports org.apache.commons.lang3;
                    exports org.apache.commons.lang3.arch;
                    exports org.apache.commons.lang3.reflect;
                }
            '''
        }
        module {
            artifact 'commons-io:commons-io:2.8.0'
            moduleInfoSource = '''
                module org.apache.commons.io {
                    requires java.se;
                    exports org.apache.commons.io;
                    exports org.apache.commons.io.file;
                }
            '''
        }
        module {
            artifact 'io.sentry:sentry:1.7.30'
            moduleInfoSource = '''
                module io.sentry {
                    exports io.sentry;        
                    exports io.sentry.context;    
                    exports io.sentry.event;
                    requires org.slf4j;
                    requires java.naming;
                    requires com.fasterxml.jackson.core;
                }
            '''
        }
    }
}

task copyModules(type: Copy) {
    into "${buildDir}/modules"
    from configurations.runtimeClasspath
}

task copyOutput(type: Copy) {
    into "${buildDir}/modules"
    from "${buildDir}/libs"
}

build.dependsOn(copyModules)
build.dependsOn(copyOutput)

createRuntimeImage {
    outputDirectory = file("$buildDir/image")
    modulePath = [file("$buildDir/modules")]
    modules = ['com.crschnick.pdx_unlimiter.updater', 'org.slf4j', 'org.slf4j.simple', 'jdk.crypto.ec']
    excludedResources = []
    launcher {
        name = 'updater'
        module = 'com.crschnick.pdx_unlimiter.updater'
    }
    compression = 2
    stripDebug = true
    noHeaderFiles = true
    noManPages = true
}
createRuntimeImage.dependsOn(build)

task writeVersion(type: DefaultTask) {
    doLast {
        mkdir file("${buildDir}/image")
        file("${buildDir}/image/version").write(version)
    }
}
createRuntimeImage.finalizedBy(writeVersion)



import com.github.langmo.gradlensis.GradleNsisTask
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

task createDist(type: DefaultTask)
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;
if (os.windows) {

    task createLauncherExe(type: GradleNsisTask) {
        configuration = file("launcher.nsi")
        runIn = file("${projectDir}")
        destinationFolder = file("${buildDir}/bin")
    }
    createRuntimeImage.finalizedBy(createLauncherExe)


    task createInstallerExe(type: GradleNsisTask) {
        configuration = file("installer.nsi")
        runIn = file("${projectDir}")
        destinationFolder = file("${buildDir}/bin")
    }
    createInstallerExe.dependsOn(createLauncherExe)

    task zipImage(type: Zip) {
        destinationDirectory = buildDir
        archiveBaseName = "pdxu_launcher"
        archiveAppendix = "windows"
        archiveVersion = ""
        from "${buildDir}/image"
        from "${projectDir}/logo.ico"
        from "${projectDir}/logo.ico"
        from "${buildDir}/bin/launcher.exe"
    }
    zipImage.dependsOn(createRuntimeImage)

    createDist.dependsOn(zipImage)
    createDist.dependsOn(createInstallerExe)
} else {

    task createDebianPackage(type: Deb) {
        packageName = 'pdx-unlimiter'
        version = getVersion()
        license = "GPL"
        arch = "amd64"
        packageDescription = "A tool aimed at improving the gameplay experience for various Paradox Games" +
                "by providing savegame management and user-made achievements."
        url = "https://github.com/crschnick/pdx_unlimiter"

        into '/opt/pdx-unlimiter'

        from("${buildDir}/image") {
            into 'launcher'
            exclude 'bin'
        }

        from("${buildDir}/image/bin") {
            into 'launcher/bin'
            fileMode = 0550
        }

        link('/usr/bin/pdx-unlimiter', '/opt/pdx-unlimiter/launcher/bin/updater')
    }
    createDist.dependsOn(createDebianPackage)
}
