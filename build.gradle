
plugins {
    id 'application'
    id "org.moditect.gradleplugin" version "1.0.0-rc3"
    id 'org.beryx.jlink' version '2.22.3'
}

setVersion '2.2.6'

if (!file("${projectDir}/pdxu_launcher.properties").exists()) {
    file("${projectDir}/pdxu_launcher.properties").write(file("${projectDir}/pdxu_launcher.properties.default").getText())
}

java {
    modularity.inferModulePath = true

    // Use JDK 15 to avoid this bug: https://bugs.openjdk.java.net/browse/JDK-8235915
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

List<String> runArgs = [
        "--add-opens", "com.google.gson/com.google.gson.internal=io.sentry"
        ]

application {
    mainModule = 'com.crschnick.pdx_unlimiter.updater'
    mainClass = 'com.crschnick.pdx_unlimiter.updater.Updater'
    applicationDefaultJvmArgs = runArgs
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "2.11.3"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.0-alpha1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation files("$buildDir/generated-modules/commons-io-2.8.0.jar")
    implementation files("$buildDir/generated-modules/commons-lang3-3.11.jar")
    implementation files("$buildDir/generated-modules/sentry-4.0.0-alpha.2.jar")
}

addDependenciesModuleInfo {
    overwriteExistingFiles = true
    jdepsExtraArgs = ['-q']
    outputDirectory = file("$buildDir/generated-modules")
    modules {
        module {
            artifact 'org.apache.commons:commons-lang3:3.11'
            moduleInfoSource = '''
                module org.apache.commons.lang3 {
                    requires java.se;
                    exports org.apache.commons.lang3;
                    exports org.apache.commons.lang3.arch;
                    exports org.apache.commons.lang3.reflect;
                }
            '''
        }
        module {
            artifact 'commons-io:commons-io:2.8.0'
            moduleInfoSource = '''
                module org.apache.commons.io {
                    requires java.se;
                    exports org.apache.commons.io;
                    exports org.apache.commons.io.file;
                }
            '''
        }
        module {
            artifact 'io.sentry:sentry:4.0.0-alpha.2'
            moduleInfoSource = '''
                module io.sentry {
                    exports io.sentry;
                    opens io.sentry to com.google.gson;
                    
                    exports io.sentry.protocol to com.google.gson;
                    opens io.sentry.protocol to com.google.gson;
                    
                    exports io.sentry.adapters;
                    opens io.sentry.adapters to com.google.gson;
                    
                    exports io.sentry.config;
                    opens io.sentry.config to com.google.gson;
                    
                    exports io.sentry.transport;
                    opens io.sentry.transport to com.google.gson;
                    
                    exports io.sentry.util;
                    opens io.sentry.util to com.google.gson;
                    
                    requires com.google.gson;
                }
            '''
        }
    }
}

task copyModules(type: Copy) {
    into "${buildDir}/modules"
    from configurations.runtimeClasspath
}

task copyOutput(type: Copy) {
    into "${buildDir}/modules"
    from "${buildDir}/libs"
}

build.dependsOn(copyModules)
build.dependsOn(copyOutput)

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;

String resPath = "$projectDir/res" + (os.windows ? "/windows" : "/linux")

jlink {
    imageDir = file("$buildDir/image")
    options = [
            // '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages']
    launcher {
        name = 'Pdx-Unlimiter'
        jvmArgs = runArgs
    }

    customImage {
        appModules = ['com.crschnick.pdx_unlimiter.updater', 'org.slf4j', 'org.slf4j.simple', 'jdk.crypto.ec']
    }

    jpackage {
        imageOutputDir = file("$buildDir/dist")
        installerOutputDir = file("$buildDir/bin")
        imageName = 'Pdx-Unlimiter'
        skipInstaller = false
        applicationName = 'Pdx-Unlimiter'
        installerOptions.addAll(
                '--temp', "$buildDir/tempfiles",
                '--resource-dir', resPath,
                '--verbose',
                '--copyright','(C) 2020, Christopher Schnick',
                '--license-file','res/license_file.txt',
                '--vendor','Pdx-Unlimiter',
                '--description', 'A tool aimed at improving the gameplay experience for various Paradox Games.',
                '--file-associations', 'res/ck3.properties',
                '--file-associations', 'res/eu4.properties',
                '--file-associations', 'res/hoi4.properties',
                '--file-associations', 'res/sav.properties'
        )
    }
}

task createDist(type: DefaultTask)

if (os.windows) {
    // To fix this bug: https://bugs.openjdk.java.net/browse/JDK-8254920
    task copyZipDll(type: Copy) {
        into "${buildDir}/dist/Pdx-Unlimiter"
        from "${buildDir}/dist/Pdx-Unlimiter/runtime/bin/zip.dll"
    }

    jpackageImage.finalizedBy(copyZipDll)

    task writePackageVersion(type: DefaultTask) {
        doLast {
            file("${buildDir}/dist/Pdx-Unlimiter/runtime/version").write(version)
        }
    }
    jpackageImage.finalizedBy(writePackageVersion)

    task copyElevate(type: Copy) {
        into "${buildDir}/dist/Pdx-Unlimiter/runtime/bin/"
        from "${projectDir}/res/windows/Elevate.exe"
    }
    jpackageImage.finalizedBy(copyElevate)

    jlink {
        jpackage {
            icon = "imgs/logo.ico"
            installerType = 'msi'
            installerOptions.addAll(
                    '--win-upgrade-uuid', '7c4003b8-a911-4f73-9ed1-6607da01be9d',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut',
                    '--win-menu-group', 'Pdx-Unlimiter')
        }
    }

    task renameInstaller(type: Copy) {
        from ("$buildDir/bin")
        include 'Pdx-Unlimiter-' + version + ".msi"
        destinationDir file("$buildDir/bin")
        rename 'Pdx-Unlimiter-' + version + ".msi", 'pdxu_installer-windows.msi'
    }

    task signInstaller(type: Exec, dependsOn: renameInstaller) {
        workingDir "$projectDir"
        commandLine 'sign\\signtool.exe sign /f sign\\certificate.cer /fd sha256 /tr http://timestamp.comodoca.com?td=sha256 /td sha256 /v build\\bin\\pdxu_installer-windows.msi'.split(" ")

    }
    jpackage.finalizedBy(signInstaller)

    task makeWritable(type: DefaultTask) {
        doLast {
            file('build\\dist\\Pdx-Unlimiter\\Pdx-Unlimiter.exe').writable = true
        }
    }

    task signExecutable(type: Exec, dependsOn: makeWritable) {
        workingDir "$projectDir"
        commandLine 'sign\\signtool.exe sign /f sign\\certificate.cer /fd sha256 /tr http://timestamp.comodoca.com?td=sha256 /td sha256 /v /as build\\dist\\Pdx-Unlimiter\\Pdx-Unlimiter.exe'.split(" ")

    }
    jpackageImage.finalizedBy(signExecutable)
} else {
    task renameInstaller(type: Copy) {
        from ("$buildDir/bin")
        include 'pdx-unlimiter_' + version + "-1_amd64.deb"
        destinationDir file("$buildDir/bin")
        rename 'pdx-unlimiter_' + version + "-1_amd64.deb", 'pdxu_installer-linux.deb'
    }
    jpackage.finalizedBy(renameInstaller)

    task writeControlVersion(type: DefaultTask) {
        doLast {
            file(resPath + "/control")
                    .write(file(resPath + "/control.default").text.replace('${version}', "" + getVersion()))
        }
    }
    jpackage.dependsOn(writeControlVersion)

    task writePackageVersion(type: DefaultTask) {
        doLast {
            file("${buildDir}/dist/Pdx-Unlimiter/lib/runtime/version").write(version)
        }
    }
    jpackageImage.finalizedBy(writePackageVersion)

    jlink {
        jpackage {
            installerType = 'deb'
            installerOptions.addAll(
                    '--linux-shortcut')
        }
    }
}

createDist.finalizedBy(jpackage)
